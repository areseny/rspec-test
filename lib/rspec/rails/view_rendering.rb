require 'action_view/testing/resolvers'

module RSpec
  module Rails
    module ViewRendering
      extend ActiveSupport::Concern

      module ClassMethods
        def metadata_for_rspec_rails
          metadata[:rspec_rails] ||= {}
        end

        # See RSpec::Rails::ControllerExampleGroup
        def render_views
          metadata_for_rspec_rails[:render_views] = true
        end

        def render_views?
          metadata_for_rspec_rails[:render_views]
        end
      end

      module ::ActionView
        # Delegates find_all to the submitted controller's view_paths and then
        # returns templates with modified source
        class PathSetDelegatorResolver < Resolver
          attr_reader :path_set

          def initialize(controller)
            @controller = controller
            @path_set = controller.class.view_paths
          end

          def find_all(*args)
            template_source = <<-SOURCE
#{"*"*80}
Template source generated by RSpec. If you prefer to render view templates
in your specs, add render_views to the example group, like this:

  describe MyController do
    render_views

Debug info:

  controller: #{@controller.class}
    resolver: #{self.class}
        args: #{args.inspect}
#{"*"*80}
SOURCE

            templates = @path_set.find_all(*args)
            templates.each do |t|
              t.singleton_class.__send__ :define_method, :source do |*|
                template_source
              end
            end
          end
        end
      end

      included do
        before do
          @_path_set_delegator_resolver = ::ActionView::PathSetDelegatorResolver.new(@controller)
          @controller.class.view_paths = ::ActionView::PathSet.new.push(@_path_set_delegator_resolver)
        end
        
        after do
          @controller.class.view_paths = @_path_set_delegator_resolver.path_set
        end
      end

    end
  end
end
